#!/usr/bin/python3 -cimport os, sys; os.execv(os.path.dirname(sys.argv[1]) + "/../common/pywrap", sys.argv)

from testlib import MachineCase, test_main, sit
import configparser
import io

class TestVPNPlayground(MachineCase):
    provision = {
            "machine1": {"address": "192.168.100.11/24", "restrict": False},
            "machine2": {"address": "192.168.100.12/24", "restrict": False},
    }

    def testVPN(self):
        m = self.machine
        m1 = self.machines["machine1"]
        m2 = self.machines["machine2"]

        # Peer 2 (server)
        m2.execute("systemctl stop firewalld") # TODO: Fix it
        m2.execute("wg genkey > private")
        m2_port = 51820
        m2_pubkey = m2.execute("wg pubkey < private").strip()

        m2.execute("ip link add dev wg0 type wireguard")
        m2.execute("ip addr add 10.0.0.2/24 dev wg0")
        m2.execute("wg set wg0 private-key ./private")
        m2.execute(f"wg set wg0 listen-port {m2_port}")
        m2.execute("ip link set wg0 up")

        # Peer 1 (client)
        m1.execute("systemctl stop firewalld") # TODO: Fix it
        m1.execute("wg genkey > private")
        private_key = m.execute("cat private").strip()
        m1_pubkey = m1.execute("wg pubkey < private").strip()
        m1_port = 51820
        dbus_command = '''
            gdbus call --system \
                       --dest org.freedesktop.NetworkManager \
                       --object-path /org/freedesktop/NetworkManager/Settings \
                       --method org.freedesktop.NetworkManager.Settings.AddConnection \
                       '{
                               "connection": {"type": <"wireguard">, "id": <"connection-wg0">, "interface-name": <"wg0">},
                               "wireguard": {"private-key": <"%s">, "listen-port": <uint32 %s>, "peers": <[{"public-key": <"%s">, "allowed-ips": <["10.0.0.2/24"]>, "endpoint": <"192.168.100.12:%s">}]>},
                               "ipv4": {"address-data": <[{"address": <"10.0.0.1">, "prefix": <uint32 24>}]>, "method": <"manual">}
                       }'
        ''' % (private_key, m1_port, m2_pubkey, m2_port)
        m1.execute(dbus_command)

        m2.execute(f"wg set wg0 peer {m1_pubkey} allowed-ips 10.0.0.1/32") # endpoint and port is not necessary for a peer if that peer estalishes the connectio first (i.e. the client)

        m1.execute("ping -c 1 10.0.0.2")

# INI -> Python Dictionary
def convertToDict(string_config):
    buf = io.StringIO(string_config)
    config_object = configparser.ConfigParser()
    config_object.read_file(buf)

    output_dic = dict()
    sections = config_object.sections()
    for section in sections:
        items = config_object.items(section)
        output_dic[section] = dict(items)

    return output_dic


if __name__ == "__main__":
    test_main()
