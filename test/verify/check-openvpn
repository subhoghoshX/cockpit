#!/usr/bin/python3 -cimport os, sys; os.execv(os.path.dirname(sys.argv[1]) + "/../common/pywrap", sys.argv)

import subprocess
import sys

import testlib


# Deps: openvpn, network-manager-openvpn, easy-rsa (optional)
class TestOpenVPNPlayground(testlib.MachineCase):
    provision = {
            "machine1": {"address": "192.168.100.11/24", "restrict": False},
            "machine2": {"address": "192.168.100.12/24", "restrict": False},
    }

    def testOpenvpn(self):
        m1 = self.machines["machine1"]
        m2 = self.machines["machine2"]

        # increasing productivity
        keys_dir = "/usr/share/doc/openvpn/examples/sample-keys"

        # SERVER
        server_conf = """ "
remote 192.168.100.11
dev tun1
ifconfig 10.4.0.2 10.4.0.1
tls-server

dh /usr/share/doc/openvpn/examples/sample-keys/dh2048.pem

ca /usr/share/doc/openvpn/examples/sample-keys/ca.crt

cert /usr/share/doc/openvpn/examples/sample-keys/server.crt

key /usr/share/doc/openvpn/examples/sample-keys/server.key
        " """
        m2.execute(f"echo {server_conf} >> /etc/openvpn/server.conf")
        m2.execute("systemctl enable --now openvpn@server")

        # create .ovpn file for client
        ovpn_conf = """ "# start
client
dev tun
remote 192.168.100.12 1194 udp
remote 192.168.100.12 443 tcp

data-ciphers-fallback BF-CBC # this was needed to make the client directive work

remote-cert-tls server
# cipher AES-256-CBC
# auth SHA256
# -> ping fails with the above two
persist-tun
socket-flags TCP_NODELAY
push-peer-info

ifconfig 10.4.0.1 10.4.0.2
tls-client
        " """
        m2.execute(f"echo {ovpn_conf} >> {keys_dir}/test.ovpn")
        m2.execute(f"echo '<ca>' >> {keys_dir}/test.ovpn")
        m2.execute(f"cat {keys_dir}/ca.crt >> {keys_dir}/test.ovpn")
        m2.execute(f"echo '</ca>' >> {keys_dir}/test.ovpn")

        m2.execute(f"echo '<cert>' >> {keys_dir}/test.ovpn")
        m2.execute(f"cat {keys_dir}/client.crt >> {keys_dir}/test.ovpn")
        m2.execute(f"echo '</cert>' >> {keys_dir}/test.ovpn")
        
        m2.execute(f"echo '<key>' >> {keys_dir}/test.ovpn")
        m2.execute(f"cat {keys_dir}/client.key >> {keys_dir}/test.ovpn")
        m2.execute(f"echo '</key>' >> {keys_dir}/test.ovpn")

        # download the .ovpn file from the server to client
        m1.execute("ssh-keygen -t ed25519 -C '<comment>' -f '/root/.ssh/id_ed25519' -N ''")
        pubkey = m1.execute("cat .ssh/id_ed25519.pub")
        m2.execute(f"echo '{pubkey.strip()}' >> .ssh/authorized_keys")
        m1.execute(f"scp -o StrictHostKeyChecking=accept-new 192.168.100.12:{keys_dir}/test.ovpn .")

        m1.spawn("openvpn test.ovpn", "openvpn_log")
        m1.execute("sleep 10; ping -c 1 10.4.0.2")

if __name__ == "__main__":
    testlib.test_main()
