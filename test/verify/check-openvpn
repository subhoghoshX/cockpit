#!/usr/bin/python3 -cimport os, sys; os.execv(os.path.dirname(sys.argv[1]) + "/../common/pywrap", sys.argv)

import subprocess
import sys

import testlib


# Deps: openvpn, network-manager-openvpn, easy-rsa (optional)
class TestOpenVPNPlayground(testlib.MachineCase):
    provision = {
            "machine1": {"address": "192.168.100.11/24", "restrict": False},
            "machine2": {"address": "192.168.100.12/24", "restrict": False},
    }

    def testOpenvpn(self):
        m1 = self.machines["machine1"]
        m2 = self.machines["machine2"]

        # increasing productivity
        keys_dir = "/etc/openvpn"
        m1.execute("touch .hushlogin")
        m2.execute("touch .hushlogin")

        ###############################################################
        #                           SERVER                            #
        ###############################################################
        m2.execute("openssl genrsa -out ca.key")
        m2.execute("openssl req -x509 -new -sha512 -nodes -key ca.key -days 7307 -out ca.crt -subj '/C=XX/ST=StateName/L=CityName/O=CompanyName/OU=CompanySectionName/CN=CommonNameOrHostname'")
        m2.execute("openssl dhparam -out /etc/openvpn/dh2048.pem 2048")
        m2.execute("openssl genrsa -out server.key")
        host_conf = """ "
[req]
default_md = sha512
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
[req]
distinguished_name = req_distinguished_name
req_extensions = req_ext
prompt = no
[req_distinguished_name]
C   = AU
ST  = Victoria
L   = Melbourne
O   = My Company
OU  = My Division
CN  = testing.com
[req_ext]
subjectAltName = @alt_names
[alt_names]
DNS.1 = testing.com
DNS.2 = *.testing.com
        " """
        m2.execute(f"echo {host_conf} >> host.conf")
        m2.execute("openssl req -new -sha512 -nodes -key server.key -out server.csr -config host.conf")
        host_ext_conf = """ "
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "My First Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names
[alt_names]
DNS.1 = testing.com
DNS.2 = *.testing.com
        " """
        m2.execute(f"echo {host_ext_conf} >> host-ext.conf")
        m2.execute("openssl x509 -req -sha512 -days 45 -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -extfile host-ext.conf")

        m2.execute("openssl genrsa -out client.key")
        m2.execute("openssl req -new -sha512 -nodes -key client.key -out client.csr -config host.conf")
        m2.execute("openssl x509 -req -sha512 -days 3650 -CA ca.crt -CAkey ca.key -in client.csr -set_serial 01 -out client.crt")
        m2.execute("mv -t /etc/openvpn/ ca.key ca.crt server.key server.crt client.key client.crt")
        server_conf = """ "
port 1194
proto udp
dev tun

# ca /usr/share/doc/openvpn/examples/sample-keys/ca.crt
ca ca.crt
# cert /usr/share/doc/openvpn/examples/sample-keys/server.crt
cert server.crt
# key /usr/share/doc/openvpn/examples/sample-keys/server.key
key server.key
# dh /usr/share/doc/openvpn/examples/sample-keys/dh2048.pem
dh dh2048.pem

server 10.8.0.0 255.255.255.0
tls-server

keepalive 10 120
data-ciphers-fallback AES-256-CBC

persist-key
persist-tun
        " """
        m2.execute(f"echo {server_conf} >> /etc/openvpn/server.conf")
        m2.execute("systemctl enable --now openvpn@server")
        m2.execute("firewall-cmd --add-port=1194/udp")

        # create .ovpn file for client
        ovpn_conf = """ "# start
client
dev tun
proto udp
remote 192.168.100.12 1194 udp
resolv-retry infinite
persist-key
persist-tun
remote-cert-tls server
data-ciphers-fallback AES-256-CBC
        " """
        m2.execute(f"echo {ovpn_conf} >> {keys_dir}/test.ovpn")
        m2.execute(f"echo '<ca>' >> {keys_dir}/test.ovpn")
        m2.execute(f"cat {keys_dir}/ca.crt >> {keys_dir}/test.ovpn")
        m2.execute(f"echo '</ca>' >> {keys_dir}/test.ovpn")

        m2.execute(f"echo '<cert>' >> {keys_dir}/test.ovpn")
        m2.execute(f"cat {keys_dir}/client.crt >> {keys_dir}/test.ovpn")
        m2.execute(f"echo '</cert>' >> {keys_dir}/test.ovpn")
        
        m2.execute(f"echo '<key>' >> {keys_dir}/test.ovpn")
        m2.execute(f"cat {keys_dir}/client.key >> {keys_dir}/test.ovpn")
        m2.execute(f"echo '</key>' >> {keys_dir}/test.ovpn")

        ###############################################################
        #                           CLIENT                            #
        ###############################################################

        # download the .ovpn file from the server to client
        m1.execute("ssh-keygen -t ed25519 -C '<comment>' -f '/root/.ssh/id_ed25519' -N ''")
        pubkey = m1.execute("cat .ssh/id_ed25519.pub")
        m2.execute(f"echo '{pubkey.strip()}' >> .ssh/authorized_keys")
        m1.execute(f"scp -o StrictHostKeyChecking=accept-new 192.168.100.12:{keys_dir}/test.ovpn .")

        m1.spawn("openvpn test.ovpn", "openvpn_log")
        m1.execute("sleep 10; ping -c 1 10.8.0.1")
        # m1.execute("nmcli connection import type openvpn file test.ovpn")
        # m1.execute("nmcli connection up test")
        # testlib.sit()

if __name__ == "__main__":
    testlib.test_main()
